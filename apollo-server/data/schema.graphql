type Query {
  testString: String
}

type User {
  id: Int! # the ! means that every author object _must_ have an id
  email: String
  name: String
  posts: [Post] # the list of Posts by this author
}

type Post {
  id: Int!
  title: String
  slug: String
}

# the schema allows the following two queries:
type RootQuery {
  user(email: String): User
  users: [User]
  posts: [Post]
}

# this schema allows the following two mutations:
type RootMutation {
  createPost(
    title: String!
    slug: String!
    userId: Int!
  ): Post
}

# we need to tell the server which types represent the root query
# and root mutation types. We call them RootQuery and RootMutation by convention.
schema {
  query: RootQuery
  mutation: RootMutation
}
